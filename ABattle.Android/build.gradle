apply plugin: "android"
apply plugin: "org.xtend.xtend-android"
//apply from: 'strip_play_services.gradle'

android {
    buildToolsVersion "21.1.2"
    compileSdkVersion 21
    sourceCompatibility = 1.6
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        instrumentTest.setRoot('tests')
    }

    signingConfigs {
	    release {
	        storeFile file('keystore/abattle.keystore')
	        keyAlias 'abattle.npg.net-alpha'
	        storePassword "666"
	        keyPassword "666"
	    }
	    debug {
	        storeFile file('keystore/abattle.keystore')
	        keyAlias 'abattle.npg.net-alpha'
	        storePassword "666"
	        keyPassword "666"
	    }
	}

    defaultConfig {
    //  	multiDexEnabled = true
	}


	 buildTypes {
        release {
        	signingConfig signingConfigs.release
            minifyEnabled false
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'proguard-project.txt'

        }
        debug {
        	signingConfig signingConfigs.release
            minifyEnabled false
        }
    }
}

// needed to add JNI shared libraries to APK when compiling on CLI
tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(projectDir, 'libs'))
}

configurations {
	natives
}

dependencies {
    compile project(":ABattle.XCommon")
    compile project(":ABattle.Common")
    compile project(":ABattle.Communication")
    compile project(":ABattle.Server")
    compile project(":ABattle.Client")
//    compile project(":BaseGameUtils")
    compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.9.+'
//	compile 'com.android.support:multidex:1.0.0'
//    compile 'com.android.support:appcompat-v7:22.0.0'
// 	compile 'com.google.android.gms:play-services:7.0.0'
 //compile 'com.google.android.gms:play-services-games:7.0.0'
 //compile 'com.google.android.gms:play-services-identity:7.0.0'
    compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
}
//com.google.android.gms:play-services-games
//com.google.android.gms:play-services-plus
//com.google.android.gms:play-services-identity


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'net.npg.abattle.android/net.npg.abattle.ABattleActivity' //todo not working
}

